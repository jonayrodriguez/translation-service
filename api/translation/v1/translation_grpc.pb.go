// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TranslationServiceClient is the client API for TranslationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslationServiceClient interface {
	GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error)
	AddTranslation(ctx context.Context, in *AddTranslationRequest, opts ...grpc.CallOption) (*AddTranslationResponse, error)
	DeleteTranslation(ctx context.Context, in *DeleteTranslationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateTranslation(ctx context.Context, in *UpdateTranslationRequest, opts ...grpc.CallOption) (*UpdateTranslationResponse, error)
}

type translationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationServiceClient(cc grpc.ClientConnInterface) TranslationServiceClient {
	return &translationServiceClient{cc}
}

func (c *translationServiceClient) GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error) {
	out := new(GetTranslationResponse)
	err := c.cc.Invoke(ctx, "/translation.v1.TranslationService/GetTranslation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) AddTranslation(ctx context.Context, in *AddTranslationRequest, opts ...grpc.CallOption) (*AddTranslationResponse, error) {
	out := new(AddTranslationResponse)
	err := c.cc.Invoke(ctx, "/translation.v1.TranslationService/AddTranslation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) DeleteTranslation(ctx context.Context, in *DeleteTranslationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/translation.v1.TranslationService/DeleteTranslation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) UpdateTranslation(ctx context.Context, in *UpdateTranslationRequest, opts ...grpc.CallOption) (*UpdateTranslationResponse, error) {
	out := new(UpdateTranslationResponse)
	err := c.cc.Invoke(ctx, "/translation.v1.TranslationService/UpdateTranslation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslationServiceServer is the server API for TranslationService service.
// All implementations must embed UnimplementedTranslationServiceServer
// for forward compatibility
type TranslationServiceServer interface {
	GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error)
	AddTranslation(context.Context, *AddTranslationRequest) (*AddTranslationResponse, error)
	DeleteTranslation(context.Context, *DeleteTranslationRequest) (*empty.Empty, error)
	UpdateTranslation(context.Context, *UpdateTranslationRequest) (*UpdateTranslationResponse, error)
	mustEmbedUnimplementedTranslationServiceServer()
}

// UnimplementedTranslationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslationServiceServer struct {
}

func (UnimplementedTranslationServiceServer) GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslation not implemented")
}
func (UnimplementedTranslationServiceServer) AddTranslation(context.Context, *AddTranslationRequest) (*AddTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTranslation not implemented")
}
func (UnimplementedTranslationServiceServer) DeleteTranslation(context.Context, *DeleteTranslationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranslation not implemented")
}
func (UnimplementedTranslationServiceServer) UpdateTranslation(context.Context, *UpdateTranslationRequest) (*UpdateTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTranslation not implemented")
}
func (UnimplementedTranslationServiceServer) mustEmbedUnimplementedTranslationServiceServer() {}

// UnsafeTranslationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslationServiceServer will
// result in compilation errors.
type UnsafeTranslationServiceServer interface {
	mustEmbedUnimplementedTranslationServiceServer()
}

func RegisterTranslationServiceServer(s grpc.ServiceRegistrar, srv TranslationServiceServer) {
	s.RegisterService(&_TranslationService_serviceDesc, srv)
}

func _TranslationService_GetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).GetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translation.v1.TranslationService/GetTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).GetTranslation(ctx, req.(*GetTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_AddTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).AddTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translation.v1.TranslationService/AddTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).AddTranslation(ctx, req.(*AddTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_DeleteTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).DeleteTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translation.v1.TranslationService/DeleteTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).DeleteTranslation(ctx, req.(*DeleteTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_UpdateTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).UpdateTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/translation.v1.TranslationService/UpdateTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).UpdateTranslation(ctx, req.(*UpdateTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TranslationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "translation.v1.TranslationService",
	HandlerType: (*TranslationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTranslation",
			Handler:    _TranslationService_GetTranslation_Handler,
		},
		{
			MethodName: "AddTranslation",
			Handler:    _TranslationService_AddTranslation_Handler,
		},
		{
			MethodName: "DeleteTranslation",
			Handler:    _TranslationService_DeleteTranslation_Handler,
		},
		{
			MethodName: "UpdateTranslation",
			Handler:    _TranslationService_UpdateTranslation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "translation.proto",
}
